version: "3"

# Listing the volumes here makes them persistent across container restarts
volumes:
  postgresvol:
  mongovol:
  agbotmsgkeyvol:

networks:
  horizonnet:
    driver: bridge

services:

  agbot:
    image: openhorizon/amd64_agbot:${AGBOT_IMAGE_TAG}
    container_name: agbot
    restart: always
    ports:
      - ${HZN_LISTEN_IP}:${AGBOT_PORT}:${AGBOT_PORT}
    networks:
      - horizonnet
    volumes:
      - ${ETC}/horizon/agbot.json:/etc/horizon/anax.json.tmpl:${VOLUME_MODE}
      # when docker mounts this it "inherits" the permissions of the existing msgKey dir (which the agbot dockerfile sets the permissions correctly)
      - agbotmsgkeyvol:/var/horizon/msgKey
    #environment:
    # HZN_VAR_BASE will default to /var/horizon, which is what we want
    #  - HZN_VAR_BASE=/home/agbotuser
    healthcheck:
      # Need to wait a while for this, because the deployment script does not add the org, user, agbot until after the containers are up
      test: test $$(curl -sS -w %{http_code} -o /dev/null http://localhost:${AGBOT_PORT}/status) -eq 200
      interval: 20s
      timeout: 5s
      retries: 4
    depends_on:
      - exchange-api
      - css-api
      - postgres

  exchange-api:
    image:  openhorizon/amd64_exchange-api:${EXCHANGE_IMAGE_TAG}
    container_name: exchange-api
    restart: always
    ports:
      - ${HZN_LISTEN_IP}:${EXCHANGE_PORT}:8080
    networks:
      - horizonnet
    environment:
      # need to leave this as a variable in the config file because otherwise the $ in the pw value gets interpreted as an env var
      - EXCHANGE_ROOT_PW_BCRYPTED=$EXCHANGE_ROOT_PW_BCRYPTED
    volumes:
      - ${ETC}/horizon/exchange.json:/etc/horizon/exchange/exchange-api.tmpl:${VOLUME_MODE}
    # Note: compose version 3 does this health check forever, so do not do it very often. Plus it is no longer a condition for starting services dependent on it.
    healthcheck:
      test: test $$(curl -sS -w %{http_code} -o /dev/null http://localhost:8080/v1/admin/version) -eq 200
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      - postgres

  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG}
    container_name: postgres
    restart: always
    volumes:
      - postgresvol:/var/lib/postgresql/data
    networks:
      - horizonnet
    environment:
      - POSTGRES_DB=${EXCHANGE_DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 15s
      timeout: 5s
      retries: 3

  css-api:
    image: openhorizon/amd64_cloud-sync-service:${CSS_IMAGE_TAG}
    container_name: css-api
    restart: always
    ports:
      - ${HZN_LISTEN_IP}:${CSS_PORT}:${CSS_PORT}
    networks:
      - horizonnet
    volumes:
      - ${ETC}/horizon/css.conf:/etc/edge-sync-service/sync.conf.tmpl:${VOLUME_MODE}
      #todo: why is this needed in this container?
      - mongovol:/var/edge-sync-service/persist
    environment:
      - HZN_EXCHANGE_URL=${HZN_TRANSPORT}://exchange-api:8080/v1
    healthcheck:
      test: test $$(curl -sS -w %{http_code} -u ${EXCHANGE_USER_ORG}/admin:${EXCHANGE_USER_ADMIN_PW} -o /dev/null http://localhost:${CSS_PORT}/api/v1/health) -eq 200
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      - exchange-api
      - mongo

  mongo:
    image: mongo:${MONGO_IMAGE_TAG}
    container_name: mongo
    restart: always
    networks:
      - horizonnet
    volumes:
      - mongovol:/var/edge-sync-service/persist
    healthcheck:
      test: echo show dbs | mongo localhost:${MONGO_PORT}/test --quiet
      interval: 15s
      timeout: 5s
      retries: 3
